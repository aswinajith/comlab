import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import square

# Binary sequence
binary_seq = np.array([0, 1, 0, 1, 0, 1, 1, 0])

# Function to add AWGN noise
def awgn(signal, snr_db):
    snr_linear = 10**(snr_db / 10)
    power_signal = np.mean(signal**2)
    noise_power = power_signal / snr_linear
    noise = np.sqrt(noise_power) * np.random.randn(*signal.shape)
    return signal + noise

# ---------------- RZ UNIPOLAR SIGNALLING ----------------
rz_signal = np.repeat(binary_seq, 2)  # RZ: Each bit occupies two samples
rz_signal[1::2] = 0  # Return to zero
rz_noisy = awgn(rz_signal, snr_db=3)
rz_sampled = rz_noisy[::2]  # Take every first half of each bit
rz_decoded = (rz_sampled > 0).astype(int)
rz_errors = np.sum(rz_decoded != binary_seq)


# ---------------- BPSK TRANSMISSION ----------------
bpsk_signal = 2 * binary_seq - 1  # BPSK Mapping: 0 → -1, 1 → +1
bpsk_noisy = awgn(bpsk_signal, snr_db=3)
bpsk_decoded = (bpsk_noisy > 0).astype(int)
bpsk_errors = np.sum(bpsk_decoded != binary_seq)

# ---------------- PRINT RESULTS ----------------
print(f"RZ Unipolar Bit Errors: {rz_errors}")
print(f"BPSK Bit Errors: {bpsk_errors}")

# ---------------- PLOT SIGNALS ----------------
plt.figure(figsize=(10, 5))
plt.subplot(2,1,1)
plt.plot(rz_signal, label="RZ Unipolar Signal", drawstyle="steps-pre")
plt.plot(rz_noisy, label="Noisy RZ Signal", linestyle="dotted")
plt.title("RZ Unipolar Signaling in AWGN")
plt.legend()

plt.subplot(2,1,2)
plt.plot(bpsk_signal, label="BPSK Signal", drawstyle="steps-pre")
plt.plot(bpsk_noisy, label="Noisy BPSK Signal", linestyle="dotted")
plt.title("BPSK in AWGN")
plt.legend()
plt.show()
