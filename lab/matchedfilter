#matched filter
#Raised Cosiene
import numpy as np
import matplotlib.pyplot as plt

# Define Parameters
num_symbols = 10
sps = 8  # Samples per symbol
beta = 0.35  # Roll-off factor
num_taps = 101  # Filter length (should be odd)

# Generate Random Binary Data and Convert to NRZ
bits = np.random.randint(0, 2, num_symbols)
symbols = 2 * bits - 1

# Oversample
x = np.zeros(num_symbols * sps)
x[::sps] = symbols

# Time vector for filter
t = np.arange(-num_taps//2, num_taps//2 + 1)

# Raised Cosine Pulse (handle singularities safely)
h = np.zeros_like(t, dtype=float)
for i in range(len(t)):
    ti = t[i] / sps
    if abs(1 - (2 * beta * ti)**2) < 1e-10:
        h[i] = beta / (2 * sps) * np.sinc(1 / (2 * beta))
    else:
        h[i] = (1 / sps) * np.sinc(ti) * np.cos(np.pi * beta * ti) / (1 - (2 * beta * ti) ** 2)

# Apply Filter
x_shaped = np.convolve(x, h)

# Plotting
plt.figure(figsize=(10, 6))

plt.subplot(3, 1, 1)
plt.plot(x, '-.')
plt.title("Oversampled NRZ Signal")
plt.grid(True)

plt.subplot(3, 1, 2)
plt.plot(t, h, '.-')
plt.title("Raised Cosine Filter Response")
plt.grid(True)

plt.subplot(3, 1, 3)
plt.plot(x_shaped, '.-')

plt.tight_layout()
plt.show()
